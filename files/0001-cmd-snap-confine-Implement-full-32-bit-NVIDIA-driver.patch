From 0de674f6e963312a07856a763b27e82f464fd78f Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@solus-project.com>
Date: Mon, 13 Nov 2017 01:49:03 +0000
Subject: [PATCH 1/3] cmd/snap-confine: Implement full 32-bit NVIDIA driver
 support

This refactors mount-support-nvidia somewhat to allow us to expose the
32-bit NVIDIA drivers (from `/usr/lib32`) to the guest snap on both multiarch
and biarch systems, in their `/var/lib/snapd/lib/gl32` directory.

The `SNAP_LIBRARY_PATH` is modified to include the new directory, so that
32-bit processes in normal snapcraft packages using the helpers do not need
to do anything to benefit from them.

This particularly benefits the LSI project by making the 32-bit drivers
available to Steam.

Signed-off-by: Ikey Doherty <ikey@solus-project.com>
---
 cmd/snap-confine/mount-support-nvidia.c   | 82 ++++++++++++++++++++++++++-----
 cmd/snap-confine/snap-confine.apparmor.in |  9 ++--
 interfaces/builtin/opengl.go              |  4 +-
 snap/snapenv/snapenv.go                   |  2 +-
 snap/snapenv/snapenv_test.go              |  4 +-
 tests/main/snap-env/task.yaml             |  2 +-
 6 files changed, 80 insertions(+), 23 deletions(-)

diff --git a/cmd/snap-confine/mount-support-nvidia.c b/cmd/snap-confine/mount-support-nvidia.c
index 994b6fad9..ec2a6938b 100644
--- a/cmd/snap-confine/mount-support-nvidia.c
+++ b/cmd/snap-confine/mount-support-nvidia.c
@@ -35,6 +35,9 @@
 
 #define SC_NVIDIA_DRIVER_VERSION_FILE "/sys/module/nvidia/version"
 
+#define SC_LIBGL_DIR   "/var/lib/snapd/lib/gl"
+#define SC_LIBGL32_DIR "/var/lib/snapd/lib/gl32"
+
 #ifdef NVIDIA_BIARCH
 
 // List of globs that describe nvidia userspace libraries.
@@ -84,6 +87,42 @@ static const char *nvidia_globs[] = {
 static const size_t nvidia_globs_len =
     sizeof nvidia_globs / sizeof *nvidia_globs;
 
+// 32-bit variants of the NVIDIA driver libraries
+static const char *nvidia_globs32[] = {
+	"/usr/lib32/libEGL.so*",
+	"/usr/lib32/libEGL_nvidia.so*",
+	"/usr/lib32/libGL.so*",
+	"/usr/lib32/libOpenGL.so*",
+	"/usr/lib32/libGLESv1_CM.so*",
+	"/usr/lib32/libGLESv1_CM_nvidia.so*",
+	"/usr/lib32/libGLESv2.so*",
+	"/usr/lib32/libGLESv2_nvidia.so*",
+	"/usr/lib32/libGLX_indirect.so*",
+	"/usr/lib32/libGLX_nvidia.so*",
+	"/usr/lib32/libGLX.so*",
+	"/usr/lib32/libGLdispatch.so*",
+	"/usr/lib32/libGLU.so*",
+	"/usr/lib32/libXvMCNVIDIA.so*",
+	"/usr/lib32/libXvMCNVIDIA_dynamic.so*",
+	"/usr/lib32/libcuda.so*",
+	"/usr/lib32/libnvcuvid.so*",
+	"/usr/lib32/libnvidia-cfg.so*",
+	"/usr/lib32/libnvidia-compiler.so*",
+	"/usr/lib32/libnvidia-eglcore.so*",
+	"/usr/lib32/libnvidia-encode.so*",
+	"/usr/lib32/libnvidia-fatbinaryloader.so*",
+	"/usr/lib32/libnvidia-fbc.so*",
+	"/usr/lib32/libnvidia-glcore.so*",
+	"/usr/lib32/libnvidia-glsi.so*",
+	"/usr/lib32/libnvidia-ifr.so*",
+	"/usr/lib32/libnvidia-ml.so*",
+	"/usr/lib32/libnvidia-ptxjitcompiler.so*",
+	"/usr/lib32/libnvidia-tls.so*",
+};
+
+static const size_t nvidia_globs32_len =
+    sizeof nvidia_globs32 / sizeof *nvidia_globs32;
+
 // Populate libgl_dir with a symlink farm to files matching glob_list.
 //
 // The symbolic links are made in one of two ways. If the library found is a
@@ -167,27 +206,38 @@ static void sc_populate_libgl_with_hostfs_symlinks(const char *libgl_dir,
 	}
 }
 
-static void sc_mount_nvidia_driver_biarch(const char *rootfs_dir)
+
+static void sc_mount_and_glob_files(const char *rootfs_dir,
+				    const char *tgt_dir,
+				    const char *glob_list[],
+				    size_t glob_list_len)
 {
-	// Bind mount a tmpfs on $rootfs_dir/var/lib/snapd/lib/gl
+	// Bind mount a tmpfs on $rootfs_dir/$tgt_dir (i.e. /var/lib/snapd/lib/gl)
 	char buf[512] = { 0 };
-	sc_must_snprintf(buf, sizeof(buf), "%s%s", rootfs_dir,
-			 "/var/lib/snapd/lib/gl");
+	sc_must_snprintf(buf, sizeof(buf), "%s%s", rootfs_dir, tgt_dir);
 	const char *libgl_dir = buf;
 	debug("mounting tmpfs at %s", libgl_dir);
 	if (mount("none", libgl_dir, "tmpfs", MS_NODEV | MS_NOEXEC, NULL) != 0) {
 		die("cannot mount tmpfs at %s", libgl_dir);
 	};
 	// Populate libgl_dir with symlinks to libraries from hostfs
-	sc_populate_libgl_with_hostfs_symlinks(libgl_dir, nvidia_globs,
-					       nvidia_globs_len);
-	// Remount .../lib/gl read only
+	sc_populate_libgl_with_hostfs_symlinks(libgl_dir, glob_list,
+					       glob_list_len);
+	// Remount $tgt_dir (i.e. .../lib/gl) read only
 	debug("remounting tmpfs as read-only %s", libgl_dir);
 	if (mount(NULL, buf, NULL, MS_REMOUNT | MS_RDONLY, NULL) != 0) {
 		die("cannot remount %s as read-only", buf);
 	}
 }
 
+static void sc_mount_nvidia_driver_biarch(const char *rootfs_dir)
+{
+	sc_mount_and_glob_files(rootfs_dir, SC_LIBGL_DIR,
+				nvidia_globs, nvidia_globs_len);
+	sc_mount_and_glob_files(rootfs_dir, SC_LIBGL32_DIR,
+				nvidia_globs32, nvidia_globs32_len);
+}
+
 #endif				// ifdef NVIDIA_BIARCH
 
 #ifdef NVIDIA_MULTIARCH
@@ -197,8 +247,6 @@ struct sc_nvidia_driver {
 	int minor_version;
 };
 
-#define SC_LIBGL_DIR "/var/lib/snapd/lib/gl"
-
 static void sc_probe_nvidia_driver(struct sc_nvidia_driver *driver)
 {
 	FILE *file SC_CLEANUP(sc_cleanup_file) = NULL;
@@ -224,7 +272,7 @@ static void sc_probe_nvidia_driver(struct sc_nvidia_driver *driver)
 	      driver->minor_version);
 }
 
-static void sc_mount_nvidia_driver_multiarch(const char *rootfs_dir)
+static void sc_mount_and_bind(const char *rootfs_dir, const char *src_dir, const char *tgt_dir)
 {
 	struct sc_nvidia_driver driver;
 
@@ -239,9 +287,9 @@ static void sc_mount_nvidia_driver_multiarch(const char *rootfs_dir)
 	// and for the gl directory.
 	char src[PATH_MAX] = { 0 };
 	char dst[PATH_MAX] = { 0 };
-	sc_must_snprintf(src, sizeof src, "/usr/lib/nvidia-%d",
+	sc_must_snprintf(src, sizeof src, "%s-%d", src_dir,
 			 driver.major_version);
-	sc_must_snprintf(dst, sizeof dst, "%s%s", rootfs_dir, SC_LIBGL_DIR);
+	sc_must_snprintf(dst, sizeof dst, "%s%s", rootfs_dir, tgt_dir);
 
 	// If there is no userspace driver available then don't try to mount it.
 	// This can happen for any number of reasons but one interesting one is
@@ -251,12 +299,20 @@ static void sc_mount_nvidia_driver_multiarch(const char *rootfs_dir)
 	if (access(src, F_OK) != 0) {
 		return;
 	}
-	// Bind mount the binary nvidia driver into /var/lib/snapd/lib/gl.
+	// Bind mount the binary nvidia driver into $tgt_dir (i.e. /var/lib/snapd/lib/gl).
 	debug("bind mounting nvidia driver %s -> %s", src, dst);
 	if (mount(src, dst, NULL, MS_BIND, NULL) != 0) {
 		die("cannot bind mount nvidia driver %s -> %s", src, dst);
 	}
 }
+
+static void sc_mount_nvidia_driver_multiarch(const char *rootfs_dir)
+{
+        // Attempt mount of both the native and 32-bit variants of the driver if they exist
+        sc_mount_and_bind(rootfs_dir, "/usr/lib/nvidia", SC_LIBGL_DIR);
+        sc_mount_and_bind(rootfs_dir, "/usr/lib32/nvidia", SC_LIBGL32_DIR);
+}
+
 #endif				// ifdef NVIDIA_MULTIARCH
 
 void sc_mount_nvidia_driver(const char *rootfs_dir)
diff --git a/cmd/snap-confine/snap-confine.apparmor.in b/cmd/snap-confine/snap-confine.apparmor.in
index 5866920f6..6249bdb37 100644
--- a/cmd/snap-confine/snap-confine.apparmor.in
+++ b/cmd/snap-confine/snap-confine.apparmor.in
@@ -252,10 +252,11 @@
     /dev/nvidiactl r,
     /dev/nvidia-uvm r,
     /usr/** r,
-    mount options=(rw bind) /usr/lib/nvidia-*/ -> /{tmp/snap.rootfs_*/,}var/lib/snapd/lib/gl/,
-    /tmp/snap.rootfs_*/var/lib/snapd/lib/gl/* w,
-    mount fstype=tmpfs options=(rw nodev noexec) none -> /tmp/snap.rootfs_*/var/lib/snapd/lib/gl/,
-    mount options=(remount ro) -> /tmp/snap.rootfs_*/var/lib/snapd/lib/gl/,
+    mount options=(rw bind) /usr/lib{,32}/nvidia-*/ -> /{tmp/snap.rootfs_*/,}var/lib/snapd/lib/gl{,32}/,
+    mount options=(rw bind) /usr/lib{,32}/nvidia-*/ -> /{tmp/snap.rootfs_*/,}var/lib/snapd/lib/gl{,32}/,
+    /tmp/snap.rootfs_*/var/lib/snapd/lib/gl{,32}/* w,
+    mount fstype=tmpfs options=(rw nodev noexec) none -> /tmp/snap.rootfs_*/var/lib/snapd/lib/gl{,32}/,
+    mount options=(remount ro) -> /tmp/snap.rootfs_*/var/lib/snapd/lib/gl{,32}/,
 
     # for chroot on steroids, we use pivot_root as a better chroot that makes
     # apparmor rules behave the same on classic and outside of classic.
diff --git a/interfaces/builtin/opengl.go b/interfaces/builtin/opengl.go
index 1c16ab0d1..150056000 100644
--- a/interfaces/builtin/opengl.go
+++ b/interfaces/builtin/opengl.go
@@ -32,8 +32,8 @@ const openglConnectedPlugAppArmor = `
 # Description: Can access opengl.
 
   # specific gl libs
-  /var/lib/snapd/lib/gl/ r,
-  /var/lib/snapd/lib/gl/** rm,
+  /var/lib/snapd/lib/gl{,32}/ r,
+  /var/lib/snapd/lib/gl{,32}/** rm,
 
   # Supports linux-driver-management from Solus (staged symlink trees into libdirs)
   /var/lib/snapd/hostfs/{,usr/}lib{,32,64,x32}/{,@{multiarch}/}glx-provider/**.so{,.*}  rm,
diff --git a/snap/snapenv/snapenv.go b/snap/snapenv/snapenv.go
index ea4d78686..cce12616a 100644
--- a/snap/snapenv/snapenv.go
+++ b/snap/snapenv/snapenv.go
@@ -106,7 +106,7 @@ func basicEnv(info *snap.Info) map[string]string {
 		"SNAP_REVISION": info.Revision.String(),
 		"SNAP_ARCH":     arch.UbuntuArchitecture(),
 		// see https://github.com/snapcore/snapd/pull/2732#pullrequestreview-18827193
-		"SNAP_LIBRARY_PATH": "/var/lib/snapd/lib/gl:/var/lib/snapd/void",
+		"SNAP_LIBRARY_PATH": "/var/lib/snapd/lib/gl:/var/lib/snapd/lib/gl32:/var/lib/snapd/void",
 		"SNAP_REEXEC":       os.Getenv("SNAP_REEXEC"),
 	}
 }
diff --git a/snap/snapenv/snapenv_test.go b/snap/snapenv/snapenv_test.go
index c3829ac61..13d89bca9 100644
--- a/snap/snapenv/snapenv_test.go
+++ b/snap/snapenv/snapenv_test.go
@@ -75,7 +75,7 @@ func (ts *HTestSuite) TestBasic(c *C) {
 		"SNAP_ARCH":         arch.UbuntuArchitecture(),
 		"SNAP_COMMON":       "/var/snap/foo/common",
 		"SNAP_DATA":         "/var/snap/foo/17",
-		"SNAP_LIBRARY_PATH": "/var/lib/snapd/lib/gl:/var/lib/snapd/void",
+		"SNAP_LIBRARY_PATH": "/var/lib/snapd/lib/gl:/var/lib/snapd/lib/gl32:/var/lib/snapd/void",
 		"SNAP_NAME":         "foo",
 		"SNAP_REEXEC":       "",
 		"SNAP_REVISION":     "17",
@@ -129,7 +129,7 @@ func (s *HTestSuite) TestSnapRunSnapExecEnv(c *C) {
 			"SNAP_ARCH":         arch.UbuntuArchitecture(),
 			"SNAP_COMMON":       "/var/snap/snapname/common",
 			"SNAP_DATA":         "/var/snap/snapname/42",
-			"SNAP_LIBRARY_PATH": "/var/lib/snapd/lib/gl:/var/lib/snapd/void",
+			"SNAP_LIBRARY_PATH": "/var/lib/snapd/lib/gl:/var/lib/snapd/lib/gl32:/var/lib/snapd/void",
 			"SNAP_NAME":         "snapname",
 			"SNAP_REEXEC":       "",
 			"SNAP_REVISION":     "42",
diff --git a/tests/main/snap-env/task.yaml b/tests/main/snap-env/task.yaml
index 7bb0b58ea..17cd03c56 100644
--- a/tests/main/snap-env/task.yaml
+++ b/tests/main/snap-env/task.yaml
@@ -20,7 +20,7 @@ execute: |
     MATCH '^SNAP_ARCH=(amd64|i386|arm64|armhf|ppc64el)$'                  < snap-vars.txt
     MATCH '^SNAP_COMMON=/var/snap/test-snapd-tools/common$'               < snap-vars.txt
     MATCH '^SNAP_DATA=/var/snap/test-snapd-tools/x1$'                     < snap-vars.txt
-    MATCH '^SNAP_LIBRARY_PATH=/var/lib/snapd/lib/gl:/var/lib/snapd/void$' < snap-vars.txt
+    MATCH '^SNAP_LIBRARY_PATH=/var/lib/snapd/lib/gl:/var/lib/snapd/lib/gl32:/var/lib/snapd/void$' < snap-vars.txt
     MATCH '^SNAP_NAME=test-snapd-tools$'                                  < snap-vars.txt
     # XXX: probably not something we ought to test
     # egrep -q '^SNAP_REEXEC=0$' snap-vars.txt
-- 
2.15.0


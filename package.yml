name       : snapd
version    : 2.53.4
homepage   : https://snapcraft.io/
release    : 67
source     :
    - https://github.com/snapcore/snapd/releases/download/2.53.4/snapd_2.53.4.vendor.tar.xz : 5bdb45a27f29eefa0ec2da13643107fa9c52a6a4ea93c2b597b9edbc79ddbe67
license    : GPL-3.0-only
component  : desktop.util
summary    : The snapd and snap tools enable systems to work with .snap files
description: |
    Universal applications support - .snap files allow you to run Snap packages
    on any Linux distribution, with full sandboxing and additional security.
builddeps  :
    - pkgconfig(glib-2.0)
    - pkgconfig(libapparmor)
    - pkgconfig(libseccomp)
    - pkgconfig(libudev)
    - pkgconfig(libcap)
    - golang
    - python-docutils
    - xfsprogs-devel
rundeps    :
    - apparmor
    - libselinux
    - squashfs-tools
environment: |
    # snapd does not use modules, setting GO111MODULE=on in the environment breaks the build
    export CGO_ENABLED="1"
    export CGO_CFLAGS="${CFLAGS}"
    export CGO_CPPFLAGS="${CPPFLAGS}"
    export CGO_CXXFLAGS="${CXXFLAGS}"
    export CGO_LDFLAGS="${LDFLAGS}"
    export GO111MODULE=off
    export import_path=github.com/snapcore/snapd
    export go_binaries=(snap snapctl snap-seccomp snap-update-ns snap-exec snapd snap-failure)
    export static_binaries=(snap-update-ns snap-exec snapctl)
    export bincommands=(snap)
    export dcommands=(snapctl snapd snap-exec snap-update-ns snap-seccomp snap-failure)
setup      : |
    mkdir -p src/github.com/snapcore
    ln -s `pwd` src/github.com/snapcore/snapd

    pushd src/${import_path}
    ./mkversion.sh "$version"

    %patch -p1 < $pkgfiles/0001-Force-usage-of-sudo-over-runuser-on-Solus.patch
    %patch -p1 < $pkgfiles/0002-Support-avx2-library-paths.patch

    # Temporarily disable apparmor due to numerous issues. See T9638

    pushd cmd
    %reconfigure \
        --enable-nvidia-biarch \
        --enable-merged-usr \
        --with-snap-mount-dir=/snap
    popd
build      : |
    %make -C src/${import_path}/cmd

    for snapvar in ${go_binaries[@]}; do
        GOPATH="`pwd`" go build -o bin/$snapvar -buildmode=pie --ldflags "-w -linkmode external -extldflags '$LDFLAGS'" -trimpath ${import_path}/cmd/$snapvar
    done
    for staticpath in ${static_binaries[@]} ; do
        GOPATH="`pwd`" go build -o bin/$staticpath -buildmode=pie --ldflags "-linkmode external -extldflags '$LDFLAGS -static'" -trimpath ${import_path}/cmd/$staticpath
    done
install    : |
    %make_install -C src/${import_path}/cmd

    # Golang binaries
    for snap_bin in ${bincommands[@]} ; do
        install -m755 bin/$snap_bin $installdir/usr/bin/.
    done
    for snap_lib in ${dcommands[@]} ; do
        install -m755 bin/$snap_lib $installdir/%libdir%/$package/.
    done
    # snapctl is run from inside the snap
    ln -s /%libdir%/$package/snapctl $installdir/usr/bin/snapctl

    # Move into the base dir so we can install stuff
    pushd src/${import_path}
    %make_install -C data/ \
            DBUSSERVICESDIR=/usr/share/dbus-1/services \
            LIBEXECDIR="%libdir%" \
            SYSTEMDSYSTEMUNITDIR="%libdir%/systemd/system" \
            SNAP_MOUNT_DIR=/snap

    # empty usr/src directory (i.e. linux-lts-headers linux-current-headers) to
    # satisfy bindmounts in confinement
    install -Ddm00755 $installdir/usr/src

    install -dm00755 $installdir/%libdir%/systemd/system/sockets.target.wants
    ln -sv ../snapd.socket $installdir/%libdir%/systemd/system/sockets.target.wants/snapd.socket

    install -Dm00644 data/info $installdir/%libdir%/$package/info
    install -Dm00644 data/polkit/io.snapcraft.snapd.policy $installdir/usr/share/polkit-1/actions/io.snapcraft.snapd.policy
    install -Dm00644 $pkgfiles/snapd.tmpfiles $installdir/%libdir%/tmpfiles.d/snapd.conf
    install -Dm00644 $pkgfiles/70-snapd.sh $installdir/usr/share/defaults/etc/profile.d/70-snapd.sh

    # Completions
    install -Dm00644 data/completion/bash/snap $installdir/usr/share/bash-completion/completions/snap
    install -Dm00644 data/completion/bash/complete.sh $installdir/%libdir%/snapd/complete.sh
    install -Dm00644 data/completion/bash/etelpmoc.sh $installdir/%libdir%/snapd/etelpmoc.sh
    install -Dm00644 data/completion/zsh/_snap $installdir/usr/share/zsh/site-functions/_snap

    # remove unneeded stuff
    rm -rf $installdir/var
    rm -rf $installdir/usr/bin/ubuntu-core-launcher
    rm -rf $installdir/%libdir%/snapd/{system-shutdown,snapd.core-fixup.sh}
    rm -rf $installdir/%libdir%/systemd/system/{snapd.system-shutdown.service,snapd.autoimport.service,snapd.snap-repair.*,snapd.core-fixup.*}

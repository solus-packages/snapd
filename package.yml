name       : snapd
version    : 2.43.1
homepage   : https://snapcraft.io/
release    : 52
source     :
    - https://github.com/snapcore/snapd/releases/download/2.43.1/snapd_2.43.1.vendor.tar.xz : 29db0ee6a96bd22972ff35dd7d0fd9a9536cd38fba0e11645b083d56f68b6ebe
license    : GPL-3.0-only
component  : desktop.util
summary    : The snapd and snap tools enable systems to work with .snap files
description: |
    Universal applications support - .snap files allow you to run Snap packages
    on any Linux distribution, with full sandboxing and additional security.
builddeps  :
    - pkgconfig(glib-2.0)
    - pkgconfig(libapparmor)
    - pkgconfig(libseccomp)
    - pkgconfig(libudev)
    - pkgconfig(libcap)
    - golang
    - python-docutils
    - xfsprogs-devel
rundeps    :
    - apparmor
    - libselinux
    - squashfs-tools
environment: |
    # snapd does not use modules, setting GO111MODULE=on in the environment breaks the build
    unset GO111MODULE

    export CGO_ENABLED="1"
    export CGO_CFLAGS="${CFLAGS}"
    export CGO_CPPFLAGS="${CPPFLAGS}"
    export CGO_CXXFLAGS="${CXXFLAGS}"
    export CGO_LDFLAGS="${LDFLAGS}"

    export snapddir=src/github.com/snapcore/snapd
    export commands=(snap snapctl snapd snap-failure snap-seccomp)
    export stacommands=(snap-update-ns snapctl snap-exec)
    export bincommands=(snap)
    export dcommands=(snapctl snapd snap-exec snap-failure snap-update-ns snap-seccomp)
setup      : |
    mkdir -p src/github.com/snapcore
    ln -s `pwd` ${snapddir}

    pushd ${snapddir}
    ./mkversion.sh "$version"

    %apply_patches

    pushd cmd
    %reconfigure --enable-nvidia-biarch
build      : |
    for snapvar in ${commands[@]}; do
        GOPATH="`pwd`" go build -o bin/$snapvar -buildmode=pie --ldflags "-s -extldflags '$LDFLAGS'" github.com/snapcore/snapd/cmd/$snapvar
    done
    for staticpath in ${stacommands[@]} ; do
        GOPATH="`pwd`" go build -o bin/$staticpath -buildmode=pie --ldflags "-s -extldflags '$LDFLAGS -static'" github.com/snapcore/snapd/cmd/$staticpath
    done

    %make -C ${snapddir}/cmd
install    : |
    %make_install -C ${snapddir}/cmd
    # Golang binaries
    for tgtbin in ${bincommands[@]} ; do
        install -m00755 bin/$tgtbin $installdir/usr/bin/.
    done
    for tgtbin in ${dcommands[@]} ; do
        install -m00755 bin/$tgtbin $installdir/%libdir%/$package/.
    done
    # snapctl is run from inside the snap
    ln -s /%libdir%/$package/snaptctl $installdir/usr/bin/snapctl

    # Move into the base dir so we can install stuff
    pushd ${snapddir}
    %make_install -C data/systemd \
            LIBEXECDIR="%libdir%" \
            SYSTEMDSYSTEMUNITDIR="%libdir%/systemd/system"

    install -Ddm00755 $installdir/usr/src
    install -dm00755 $installdir/%libdir%/systemd/system/sockets.target.wants
    ln -sv ../snapd.socket $installdir/%libdir%/systemd/system/sockets.target.wants/snapd.socket
    install -Dm00644 data/info $installdir/%libdir%/$package/info
    install -Dm00644 data/polkit/io.snapcraft.snapd.policy $installdir/usr/share/polkit-1/actions/io.snapcraft.snapd.policy
    install -Dm00644 $pkgfiles/snapd.tmpfiles $installdir/%libdir%/tmpfiles.d/snapd.conf
    install -Dm00644 $pkgfiles/70-snapd.sh $installdir/usr/share/defaults/etc/profile.d/70-snapd.sh

    # Completions
    install -Dm00644 data/completion/snap $installdir/usr/share/bash-completion/completions/snap
    install -Dm00644 data/completion/complete.sh $installdir/%libdir%/snapd/complete.sh
    install -Dm00644 data/completion/etelpmoc.sh $installdir/%libdir%/snapd/etelpmoc.sh
    # remove unneeded stuff
    rm -rf $installdir/var
    rm -rf $installdir/usr/bin/ubuntu-core-launcher
    rm -rf $installdir/%libdir%/snapd/{system-shutdown,snapd.core-fixup.sh}
    rm -rf $installdir/%libdir%/systemd/system/{snapd.system-shutdown.service,snapd.snap-repair.*,snapd.core-fixup.*}

name       : snapd
version    : '2.30'
homepage   : https://snapcraft.io/
release    : 16
source     :
    - https://solus-project.com/sources/golang-revendor/snapd-2.30.tar.xz : 3505eb4c73bc6ddebad84a349d45aa7b9da68fc5bcfa6ffccf2b295c82427fe7
license    : GPL-3.0
component  : desktop.util
summary    : The snapd and snap tools enable systems to work with .snap files
description: |
    Universal applications support - .snap files allow you to run Snap packages
    on any Linux distribution, with full sandboxing and additional security.
builddeps  :
    - pkgconfig(glib-2.0)
    - pkgconfig(libapparmor)
    - pkgconfig(libseccomp)
    - pkgconfig(libudev)
    - pkgconfig(libcap)
    - golang
    - python-docutils
    - xfsprogs-devel
rundeps    :
    - libselinux
    - squashfs-tools
setup      : |
    # Set up the version from packaging
    pushd src/github.com/snapcore/snapd
    ./mkversion.sh "$version"

    %apply_patches

    # Now configure C portion
    pushd cmd
    %autogen
    %configure --enable-nvidia-biarch
build      : |
    commands=(snap snapctl snapd snap-exec snap-seccomp)
    for snapcracklepop in ${commands[@]}; do
        GOPATH="`pwd`" go install -v github.com/snapcore/snapd/cmd/$snapcracklepop
    done
    # snap-update-ns needs to be static.
    GOPATH="`pwd`" go build -o bin/snap-update-ns --ldflags '-extldflags "-static"' -v github.com/snapcore/snapd/cmd/snap-update-ns
    %make -C src/github.com/snapcore/snapd/cmd
install    : |
    # C portions
    %make_install -C src/github.com/snapcore/snapd/cmd

    # Golang binaries
    bincommands=(snap snapctl)
    dcommands=(snapd snap-exec snap-update-ns snap-seccomp)
    for tgtbin in ${bincommands[@]} ; do
        install -m 00755 bin/$tgtbin $installdir/usr/bin/.
    done
    for tgtbin in ${dcommands[@]} ; do
        install -m 00755 bin/$tgtbin $installdir/%libdir%/$package/.
    done

    # Move into the base dir so we can install stuff
    pushd src/github.com/snapcore/snapd

    # Completion
    install -m 00644 data/info $installdir/%libdir%/$package/info
    rm -vf $installdir/usr/bin/ubuntu-core-launcher

    # Polkit
    install -m 00644 -D data/polkit/io.snapcraft.snapd.policy $installdir/usr/share/polkit-1/actions/io.snapcraft.snapd.policy

    # systemd
    %make_install -C data/systemd \
        LIBEXECDIR="%libdir%" \
        SYSTEMDSYSTEMUNITDIR="%libdir%/systemd/system"

    # need tmpfiles to construct the void dir, the package is not allowed to
    # ship with it in Solus
    install -D -m 00644 $pkgfiles/snapd.tmpfiles $installdir/%libdir%/tmpfiles.d/snapd.conf
    rm -rf $installdir/var

    # You have snapd installed, so you wanna use it. Vendor-enable the .socket
    install -d -m 00755 $installdir/%libdir%/systemd/system/sockets.target.wants
    ln -sv ../snapd.socket $installdir/%libdir%/systemd/system/sockets.target.wants/snapd.socket

    # empty usr/src directory (i.e. linux-lts-headers linux-current-headers) to
    # satisfy bindmounts in confinement
    install -D -d -m 00755 $installdir/usr/src

    # Ensure we can integrate snapd in the environment
    install -D -m 0644 $pkgfiles/70-snapd.sh $installdir/usr/share/defaults/etc/profile.d/70-snapd.sh

    # bash completion
    install -D -m 00644 data/completion/snap $installdir/usr/share/bash-completion/completions/snap
    install -m 00644 data/completion/complete.sh $installdir/%libdir%/snapd/complete.sh
    install -m 00644 data/completion/etelpmoc.sh $installdir/%libdir%/snapd/etelpmoc.sh
